% Generated by MATLAB(R) 24.2 (R2024b) and Sensor Fusion and Tracking Toolbox 24.2 (R2024b).
% Generated on: 23-Aug-2025 12:15:41

scenario = createScenario();
[tp, platp, detp, covp] = createPlotters();

% Configure your tracker here:

% Add a trackPlotter here:

% Main simulation loop
while advance(scenario) && ishghandle(tp.Parent)
    % generate sensor data
    [dets, configs, sensorConfigPIDs] = detect(scenario);
    
    [truePosition, meas, measCov] = readData(scenario, dets);
    
    % update your tracker here:
    
    % update plots
    plotPlatform(platp,truePosition);
    plotDetection(detp,meas,measCov);
    plotCoverage(covp,coverageConfig(scenario));
    
    % Update the trackPlotter here:
    
    drawnow
end


function [position, meas, measCov] = readData(scenario,dets)
allDets = [dets{:}];

if ~isempty(allDets)
    % extract column vector of measurement positions
    meas = cat(2,allDets.Measurement)';

    % extract measurement noise
    measCov = cat(3,allDets.MeasurementNoise);
else
    meas = zeros(0,3);
    measCov = zeros(3,3,0);
end

truePoses = platformPoses(scenario);
position = vertcat(truePoses(:).Position);
end


function [tp, platp, detp, covp] = createPlotters
% Create plotters
tp = theaterPlot('XLim', [-57.4731659759046 70.2946624391892], 'YLim', [-106.978596961849 20.7892314532451], 'ZLim', [-119.194662439189 8.57316597590458]);
set(tp.Parent,'YDir','reverse', 'ZDir','reverse');
view(tp.Parent, -36.3401, 43.963);
platp = platformPlotter(tp,'DisplayName','Platforms','MarkerFaceColor','k');
detp = detectionPlotter(tp,'DisplayName','Detections','MarkerSize',6,'MarkerFaceColor',[0.85 0.325 0.098],'MarkerEdgeColor','k','History',10000);
covp = coveragePlotter(tp,'DisplayName','Sensor Coverage');
end


function scenario = createScenario
% Create Scenario
scenario = trackingScenario;
scenario.StopTime = Inf;
scenario.UpdateRate = 0;


% Create platforms
Tower = platform(scenario,'ClassID',3);
Tower.Dimensions = struct( ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 60, ...
    'OriginOffset', [0 0 30]);
Tower.Trajectory.Position = [-43.9 -42.7 0];

Car1 = platform(scenario,'ClassID',2);
Car1.Dimensions = struct( ...
    'Length', 4.7, ...
    'Width', 1.8, ...
    'Height', 1.4, ...
    'OriginOffset', [-0.6 0 0.7]);
Car1.Trajectory = waypointTrajectory( ...
    [-17.5 -11.7 0;48.2 -12.1 0;61.6 -25.1 0;17.85 -36 0;-7.72 -35.51 0;-21.1 -34.5 0], ...
    'GroundSpeed', [30;30;30;30;30;30], ...
    'ClimbRate', [0;0;0;0;0;0], ...
    'AutoPitch', true, ...
    'AutoBank', true, ...
    'JerkLimit', 0);

Car = platform(scenario,'ClassID',2);
Car.Dimensions = struct( ...
    'Length', 4.7, ...
    'Width', 1.8, ...
    'Height', 1.4, ...
    'OriginOffset', [-0.6 0 0.7]);
Car.Trajectory = waypointTrajectory( ...
    [-8.45 -61.91 0;-1.81 -72.29 0;17.54 -76.52 0;55.87 -64.31 0;45.8 -51.4 0;6.6 -47.1 0;-5.9 -46.8 0], ...
    'GroundSpeed', [30;30;30;30;30;30;30], ...
    'ClimbRate', [0;0;0;0;0;0;0], ...
    'AutoPitch', true, ...
    'AutoBank', true, ...
    'JerkLimit', 0);


% Create sensors
Rotator = fusionRadarSensor('SensorIndex', 1, ...
    'UpdateRate', 10, ...
    'MountingLocation', [0.05 0.08 0], ...
    'FieldOfView', [1 10], ...
    'HasINS', true, ...
    'DetectionCoordinates', 'Scenario', ...
    'MechanicalAzimuthLimits', [-30 30]);


% Assign sensors to platforms
Tower.Sensors = Rotator;
end
